#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrreprt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Společná část - otázka č.
 7
\end_layout

\begin_layout Subtitle
Spojové seznamy, lineární seznamy, obecné spojové struktury, stromy, jejich
 vlastnosti, binární stromy, implementace (A0B36PR1) 
\end_layout

\begin_layout Chapter
Pojmy
\end_layout

\begin_layout Itemize
Lineární spojová struktura (spojový seznam) - každý prvek má nanejvýš jednoho
 následníka 
\end_layout

\begin_layout Itemize
Nelineární spojová struktura (strom) - každý prvek může mít více následníků
 
\end_layout

\begin_layout Itemize
Binární strom - každý prvek (uzel) má nanejvýš dva následníky
\end_layout

\begin_layout Section
(Abstraktní) datový typ
\end_layout

\begin_layout Standard
ADT jsou nezávislé na vlastní implementaci
\end_layout

\begin_layout Standard
Počet složek: 
\end_layout

\begin_layout Itemize
neměnný = statický datový typ, počet položek je konstantní, pole, řetězec,
 třída 
\end_layout

\begin_layout Itemize
proměnný = dynamický datový typ, počet složek je proměnný, mezi operace
 patří vložení, odebrání určitého prvku
\end_layout

\begin_layout Standard
Typ položek, dat: 
\end_layout

\begin_layout Itemize
homogenní = všechny položky stejného typu 
\end_layout

\begin_layout Itemize
nehomogenní = různého typu
\end_layout

\begin_layout Standard
Existence bezprostředního následníka 
\end_layout

\begin_layout Itemize
lineární = existuje [např.
 pole, fronta, seznam,…] 
\end_layout

\begin_layout Itemize
nelineární = neexistuje [strom, tabulka,…]
\end_layout

\begin_layout Chapter
Spojové seznamy
\end_layout

\begin_layout Standard
Lineární seznam (také lineární spojový seznam) je dynamická datová struktura,
 vzdáleně podobná poli (umožňuje uchovat velké množství hodnot ale jiným
 způsobem), obsahující jednu a více datových položek (struktur) stejného
 typu, které jsou navzájem lineárně provázany vzájemnýmí odkazy pomocí ukazatelů
 nebo referencí.
 Aby byl seznam lineární, nesmí existovat cykly ve vzájemných odkazech.
\end_layout

\begin_layout Standard
Lineární seznamy mohou existovat jednosměrné a obousměrné.
 V jednosměrném seznamu odkazuje každá položka na položku následující a
 v obousměrném seznamu odkazuje položka na následující i předcházející položky.
 Zavádí se také ukazatel nebo reference na aktuální (vybraný) prvek seznamu.
 Na konci (a začátku) seznamu musí být definována zarážka označující konec
 seznamu.
 Pokud vytvoříme cyklus tak, že konec seznamu navážeme na jeho počátek,
 jedná se o kruhový seznam.
\end_layout

\begin_layout Standard
Základním prvkem spojových struktur je dvojice:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/spojoveStrukturyReferenceHodnota.png
	width 5cm

\end_inset


\end_layout

\begin_layout Itemize
reference - odkaz(y) na další prvek spojové struktury, definuje operátor
 new – znázorňujeme šipkou 
\end_layout

\begin_layout Itemize
hodnota – informace libovolného typu
\end_layout

\begin_layout Standard
Nejjednodušší typ spojové struktury – jednosměrné spojové seznamy.
\end_layout

\begin_layout Standard
Spojové struktury jsou mocným implementačním prostředkem pro ADT, viz dálší
 přednáška o ADT a předmět Algoritmizace: 
\end_layout

\begin_layout Enumerate
– Fronty 
\end_layout

\begin_layout Enumerate
– Zásobníky
\end_layout

\begin_layout Enumerate
– Stromy 
\end_layout

\begin_layout Enumerate
– Grafy
\end_layout

\begin_layout LyX-Code
Prvek hlava = null; 
\end_layout

\begin_layout LyX-Code
int cislo= 14; 
\end_layout

\begin_layout LyX-Code
while (cislo<26) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
hlava = new Prvek(cislo,hlava); 
\end_layout

\begin_layout LyX-Code
cislo += 4; 
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Tento kód odpovídá struktuře (jednosměrný seznam s odkazem pouze na hlavu):
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/spojovySeznam1.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
Jednosměrný seznam lze vylepšit, že se udržuje reference i na poslední,
 nebo volný prvek.
\end_layout

\begin_layout LyX-Code
class Prvek {
\end_layout

\begin_deeper
\begin_layout LyX-Code
int hodnota;
\end_layout

\begin_layout LyX-Code
Prvek dalsi;
\end_layout

\begin_layout LyX-Code
// popr.
 dalsi konstruktory, treba prazdny, co nastavi vse na null
\end_layout

\begin_layout LyX-Code
public Prvek (int h, Prvek p) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
hodnota = h;
\end_layout

\begin_layout LyX-Code
dalsi = p;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
public class Seznam {
\end_layout

\begin_deeper
\begin_layout LyX-Code
Prvek prvni;
\end_layout

\begin_layout LyX-Code
Prvek volny;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
public Seznam () {
\end_layout

\begin_deeper
\begin_layout LyX-Code
prvni = new Prvek(0, null);
\end_layout

\begin_layout LyX-Code
volny = prvni;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_deeper
\begin_layout LyX-Code
public void vlozNaKonec(int x) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
volny.hodn = x; 
\end_layout

\begin_layout LyX-Code
volny.dalsi = new Prvek(); 
\end_layout

\begin_layout LyX-Code
volny = volny.dalsi; 
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
public void vypis() { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
Prvek pom = prvni; 
\end_layout

\begin_layout LyX-Code
while (pom!=volny) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
System.out.print(pom.hodn+" "); 
\end_layout

\begin_layout LyX-Code
pom = pom.dalsi;
\end_layout

\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\begin_layout LyX-Code
System.out.println(); 
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
public void vlozNaZacatek(int x) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
prvni = new Prvek(x, prvni); 
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
public boolean jePrvkem1(int x) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
Prvek pom = prvni; 
\end_layout

\begin_layout LyX-Code
while (pom.hodn!=x && pom!=volny) 
\end_layout

\begin_deeper
\begin_layout LyX-Code
pom = pom.dalsi; 
\end_layout

\end_deeper
\begin_layout LyX-Code
return pom!=volny; }
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
} // konec tridy Seznam
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
// volani pr.
\end_layout

\begin_layout LyX-Code
Seznam s = new Seznam();
\end_layout

\begin_layout LyX-Code
s.vlozNaKonec(6);
\end_layout

\begin_layout LyX-Code
s.vlozNaKonec(7);
\end_layout

\begin_layout LyX-Code
s.vypis();
\end_layout

\begin_layout Chapter
Stromy
\end_layout

\begin_layout Standard
V informatice je strom široce využívanou datovou strukturou, která představuje
 stromovou strukturu s propojenými uzly.
\end_layout

\begin_layout Standard
Pojmy:
\end_layout

\begin_layout Enumerate
„Cesta“ k nějakému uzlu je definována jako posloupnost všech uzlů od kořene
 k uzlu.
 
\end_layout

\begin_layout Enumerate
„Délka cesty“ je rovna počtu hran, které cesta obsahuje, tedy počtu uzlů
 posloupnosti – 1 (mínus jedna).
 
\end_layout

\begin_layout Enumerate
„Hloubka uzlu“ je definována jako délka cesty od kořene k uzlu.
 Prvky se stejnou hloubkou jsou na „téže úrovni“.
 
\end_layout

\begin_layout Enumerate
„Výška stromu“ je rovna hodnotě maximální hloubky uzlu, se označuje též
 za „hloubku stromu“.
 
\end_layout

\begin_layout Enumerate
„Šířkou stromu“ je počet uzlů na stejné úrovni.
 
\end_layout

\begin_layout Enumerate
Strom má „nejmenší výšku“ právě tehdy, když na všech úrovních (s možnou
 výjimkou té poslední) má tato struktura plný počet uzlů.
 Úroveň všech listů je stejná nebo se liší maximálně o 1.
 
\end_layout

\begin_layout Section
Uspořádanost
\end_layout

\begin_layout Standard
„Uspořádaný“ nebo také „seřazený strom“ je takový strom, ve kterém jsou
 všichni přímí potomci každého uzlu seřazeni.
 Tudíž, pokud uzel má n dětí, lze určit prvního přímého potomka, druhého
 přímého potomka, až n-tého přímého potomka.
 U „neuspořádaného stromu“ se jedná o strom v čistě strukturálním smyslu.
 To znamená, že pro daný uzel nejsou uspořádáni potomci.
\end_layout

\begin_layout Section
Vyvážený strom
\end_layout

\begin_layout Standard
„Vyvážený strom“ je takový strom, který má uzly rovnoměrně rozložené, tedy
 má nejmenší výšku.
 Ideální situace je taková, kdy má strom v každé hladině, kromě poslední,
 maximální počet uzlů, a v poslední hladině má uzly co nejvíce vlevo.
\end_layout

\begin_layout Section
Procházení stromu (podrobněji pravděpodobně v ALG)
\end_layout

\begin_layout Subsection
Do šířky
\end_layout

\begin_layout Standard
Procházením „stromu do šířky“ (anglicky „level-order“) se rozumí procházení
 stromem po vrstvách úrovní (tzn.
 po hladinách).
\end_layout

\begin_layout Subsection
Do hloubky
\end_layout

\begin_layout Standard
Procházení začíná v kořeni stromu a postupuje se vždy na potomky daného
 vrcholu.
 Procházení končí, když v žádné větvi (tj.
 v žádném podstromu) již není následník.
 Podle pořadí, ve kterém se prochází uzly uspořádaného stromu, se rozlišují
 tři základní metody:
\end_layout

\begin_layout Subsubsection
PREORDER
\end_layout

\begin_layout Enumerate
proveď akci 
\end_layout

\begin_layout Enumerate
projdi levý podstrom 
\end_layout

\begin_layout Enumerate
projdi pravý podstrom 
\end_layout

\begin_layout Subsubsection
INORDER
\end_layout

\begin_layout Enumerate
projdi levý podstrom 
\end_layout

\begin_layout Enumerate
proveď akci 
\end_layout

\begin_layout Enumerate
projdi pravý podstrom 
\end_layout

\begin_layout Subsubsection
POSTORDER
\end_layout

\begin_layout Enumerate
projdi levý podstrom 
\end_layout

\begin_layout Enumerate
projdi pravý podstrom 
\end_layout

\begin_layout Enumerate
proveď akci 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/prohledavaniBinStromu.png
	width 12cm

\end_inset


\end_layout

\begin_layout Section
Binární stromy
\end_layout

\begin_layout Standard
Každý prvek (uzel) má nanejvýš dva následníky (obecně lze prvkům stromu
 říkat také node, z ang., čteno [nouda]).
 Binární strom obsahuje uzly, které mají nejvíce dva syny.
\end_layout

\begin_layout Standard
Důležité pojmy:
\end_layout

\begin_layout Enumerate
kořen stromu - nejvyšší prvek, nemá rodiče
\end_layout

\begin_layout Enumerate
levý podstrom - strom levých potomků
\end_layout

\begin_layout Enumerate
pravý podstrom - pravých
\end_layout

\begin_layout Enumerate
vnitřní uzel - prvek, který má potomky (často se sem nepočítá kořen, někdy
 ano)
\end_layout

\begin_layout Enumerate
list - prvek, který již nemá potomky
\end_layout

\begin_layout Standard
U binarního stromu rozlišujeme další pojmy:
\end_layout

\begin_layout Itemize
Plný binární strom - všechny jeho listy jsou ve stejné hloubce.
 
\end_layout

\begin_layout Itemize
Úplný binární strom - každý vnitřní uzel má dva syny.
 
\end_layout

\begin_layout Itemize
Vyvážený binární strom - hloubka listů se od sebe liší maximálně o jedna.
 
\end_layout

\begin_layout Subsection
Trochu matiky
\end_layout

\begin_layout Itemize
h – hloubka stromu, 
\end_layout

\begin_layout Itemize
n – počet uzlů
\end_layout

\begin_layout Itemize
n0 – počet listů
\end_layout

\begin_layout Itemize
n2 – počet vnitřních uzlů
\end_layout

\begin_layout Standard
Úplný binární strom:
\end_layout

\begin_layout Standard
minimální počet uzlů: 
\begin_inset Formula $n=2^{h}+1$
\end_inset

 
\end_layout

\begin_layout Standard
maximální počet uzlů: 
\begin_inset Formula $n\text{=}2{}^{h+1}-1$
\end_inset


\end_layout

\begin_layout Standard
počet listů: n/2 (zaokrouhleno nahoru)
\end_layout

\begin_layout Chapter
Abstraktní datové typy
\end_layout

\begin_layout Standard
Tato část předmětu PRG2 není napsána v zadání u této otázky a je součástí
 ALG (je pouze obsahem slajdů k PRG2).
 Proto zde není popsána.
\end_layout

\end_body
\end_document

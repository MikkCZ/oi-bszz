#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrreprt
\use_default_options true
\maintain_unincluded_children false
\language czech
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
setcounter{chapter}{17}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Rekurze, základní schéma, základní vlastnosti, souvislost rekurze a iterace,
 vlastnosti implementace, efektivita.
 (A4B36ALG)
\end_layout

\begin_layout Standard
7.června 2012, Václav Burda
\end_layout

\begin_layout Standard

\emph on
Co říci na začátek:
\end_layout

\begin_layout Standard
Rekurze nám dáva možnost definice něčeho nekonečného konečným algoritmem.
 Rekurzivní volání funkce je tedy takové volání, ke kterému dojde ve chvíli,
 kdy funkce samotná ještě nedokončila svou činnost.
\end_layout

\begin_layout Section
Základní schéma
\end_layout

\begin_layout Enumerate
inicializační algoritmus - rekurzivní funkce většinou potřebuje nějakou
 inicializační hodnotu, se kterou zahájí výpočet.
 To většinou zajišťuje jiná funkce, která není rekurzivní a která danou
 rekurzivní funkci volá a předává hodnotu, se kterou rekurzivní výpočet
 začíná
\end_layout

\begin_layout Enumerate
kontrola, zda vstupní parametr odpovídá stanoveným podmínkám.
 Pokud hodnota parametru odpovídá, rekurzivní funkce provede výpočet a vrátí
 hodnotu
\end_layout

\begin_layout Enumerate
rekurzivní funkce redefinuje řešení problému tak, že jej nějakým způsobem
 zmenší, zjednoduší nebo rozloží na dílčí podproblémy
\end_layout

\begin_layout Enumerate
volání funkcí, které řeší daný podproblém - tady nastává přímé nebo nepřímé
 volání sebe sama
\end_layout

\begin_layout Enumerate
sestavení výsledku
\end_layout

\begin_layout Enumerate
vrácení vypočtené hodnoty
\end_layout

\begin_layout Section
Základní vlastnosti
\end_layout

\begin_layout Standard
Dělení rekurze 1:
\end_layout

\begin_layout Itemize
Lineární - v každé iteraci dojde k pouze jednomu zavolání sebe sama.
\end_layout

\begin_layout Itemize
Stromová - v každé iteraci dochází k více dělení na podprogramy.
\end_layout

\begin_layout Standard
Dělení rekuzre 2:
\end_layout

\begin_layout Itemize
Přímá - v dáné rekurzivní funkci dojde k volání téže funkce.
\end_layout

\begin_layout Itemize
Nepřímá - rekurzivní volání, ke kterému dochází přes další funkci (např.
 A volá B a B volá A).
\end_layout

\begin_layout Standard
Volání může probíhat přímo nebo nepřímo.
 Každá rekurze se nechá přepsat na nerekurzivní tvar například pomocí zásobníku
 (udržujeme si datovou strukturu, která nahrazuje implicitní hardwarový
 zásobník použitý při rekurzivním volání).
\end_layout

\begin_layout Section
Vlastnosti implementace
\end_layout

\begin_layout Standard
Rekurzí lze dosáhnout zjednodušení řešené úlohy, ale je nutné brát v úvahu
 následující úskalí:
\end_layout

\begin_layout Itemize
Každé další volání rekurzívní funkce prohlubuje zapouzdření a tedy zabírá
 paměťový prostor a procesorový čas.
\end_layout

\begin_layout Itemize
V případě chybně ošetřeného ukončení rekurze dochází k vučerpání veškérých
 volných prostředků a k havárii programu.
\end_layout

\begin_layout Itemize
Použití může vést ke zvýšení složitosti výpočtu.
\end_layout

\begin_layout Standard
Rekurze musí obsahovat:
\end_layout

\begin_layout Itemize
Ukončovací podmínku.
\end_layout

\begin_layout Itemize
V každém kroku rekurze musí dojít ke zjednodušení problému.
\end_layout

\begin_layout Itemize
V algoritmu se nejprve musí ověřit, zda nenastala koncová situace.
 Když ne, provede se rekurzivní krok.
\end_layout

\begin_layout Section
Souvislost rekurze a iterace
\end_layout

\begin_layout Standard
Příklad výpočtu Faktoriálu pomocí rekurze:
\end_layout

\begin_layout LyX-Code
function Faktorial ( integer X )
\end_layout

\begin_layout LyX-Code
   if X < 0 then return "Chybny argument" end if
\end_layout

\begin_layout LyX-Code
   if X = 0 then return 1 end if
\end_layout

\begin_layout LyX-Code
   return Faktorial(X-1) * X 
\end_layout

\begin_layout LyX-Code
end function
\end_layout

\begin_layout Standard
a pomocí iterace:
\end_layout

\begin_layout LyX-Code
function Faktorial (integer X)
\end_layout

\begin_layout LyX-Code
     integer nfact
\end_layout

\begin_layout LyX-Code
     if X < 0 then return "Chybny argument" end if
\end_layout

\begin_layout LyX-Code
     nfact = 1 
\end_layout

\begin_layout LyX-Code
     for i = 1 to X do
\end_layout

\begin_layout LyX-Code
           nfact = nfact * i
\end_layout

\begin_layout LyX-Code
     end for
\end_layout

\begin_layout LyX-Code
     return nfact
\end_layout

\begin_layout LyX-Code
end function
\end_layout

\begin_layout Section
Efektivita
\end_layout

\begin_layout Standard
Hlavní nevýhodou rekurze je u stromové struktury několikanásobné počítání
 stejných výpočtů (v případě Fibonacciho posloupnosti jde o exponenciální
 složitost).
 Tento nedostatek lze vyřešit zavedením tabulky (pole), do které ukládáme
 již spočítané výsledky (ale potřebujeme další paměť pro tuto tabulku).
\end_layout

\begin_layout Section
Zdroje
\end_layout

\begin_layout Itemize
http://cs.wikipedia.org/wiki/Rekurze#Efektivita_rekurzivn.C3.ADch_algoritm.C5.AF
\end_layout

\begin_layout Itemize
http://cs.wikipedia.org/wiki/Rekurzivní_funkce_(programování)
\end_layout

\begin_layout Itemize
http://service.felk.cvut.cz/courses/Y36ALG/balik/Alg5Balik2008.pdf
\end_layout

\begin_layout Itemize
http://www.algoritmy.net/article/23275/Rekurze-11
\end_layout

\end_body
\end_document

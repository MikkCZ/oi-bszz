#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrreprt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{chapter}{14} 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Základní algoritmy řazení (mergesort, quicksort, heapsort, radixsort) a
 vyhledávání půlením intervalu, jejich složitost.
 (A4B36ALG)
\end_layout

\begin_layout Section
Základní algoritmy řazení
\end_layout

\begin_layout Standard
V popiscích jednotlivých algoritmů se vyskytují následující hesla a charakterist
iky 
\end_layout

\begin_layout Minisec
Rozděl a panuj
\end_layout

\begin_layout Standard
Tato metoda označuje ty algoritmy pro práci s daty, které řeší problém rozdělení
m řešené úlohy na 
\series bold
dílčí části (podproblémy)
\series default
, nad kterými se provádí algoritmická operace.
 Často se tato metoda implementuje rekurzivně nebo iterativně a původní
 úloha se dělí na stále menší části.
\end_layout

\begin_layout Minisec
Stabilní/nestabilní algoritmus
\end_layout

\begin_layout Standard
Stabilním algoritmus je ten, který zachovává pořadí stejných prvků, tak
 jak byly na vstupu v seznamu.
 Seřadí je na odpovídající místo, ale v rámci stejných prvků zůstanou ve
 stejném pořadí.
 U nestabilního algoritmu toto nezaručíme.
 
\end_layout

\begin_layout Subsection
Mergesort
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní mergesortu z předmětu A4B36ALG spolecna/15/mergesort.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mergesort je 
\series bold
stabilní
\series default
 řadicí algoritmus typu 
\series bold
rozděl a panuj
\series default
 s asymptotickou složitostí 
\begin_inset Formula $\text{Ο}(n*\log(n))$
\end_inset

.
 Merge sort pracuje na bázi 
\series bold
slévání
\series default
 již seřazených částí pole.
 
\end_layout

\begin_layout Subsubsection
Merge
\end_layout

\begin_layout Standard
Proces merge nebo-li slévání probíhá následovně.
 Máme dva seznamy, u kterých víme, že jsou seřazeny ve stejném pořadí.
 Postupně je procházíme a díváme se, který z právě iterovaných členů je
 větší (případně menší, záleží, jak srovnávám).
 Ten větší (resp.
 menší) z dvojice vložíme do pomocného seznamu.
 Takto se dostanem do fáze, kdy jeden ze seznamů, kterými iterujem, je už
 prázdný.
 Můžeme tedy zbytek druhého vzít a celý ho zkopírovat na konec do pomocného
 seznamu.
\end_layout

\begin_layout Standard
Ve vypsaném kódu je první 
\family typewriter
while
\family default
 cyklus na řádku 13 porovnávání.
 Z následujících dvou cyklů (21 a 25) se provede jen jeden a to ten, který
 zkopíruje do pomocného seznamu zbývající členy jednoho ze dvou iterovaných
 seznamů.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "mergesort_snippet01.java"
lstparams "breaklines=true,language=Java,numbers=left,numberstyle={\\footnotesize}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Průběh algoritmu
\end_layout

\begin_layout Standard
Algoritmu dodáme array, který postupným půlením rekurzivně rozdělíme do
 nejmenších skupin, tedy dvojic a připadně lichého členu.
 Na řádku 14 aplikujeme proces merge na tyto malé jednotky, a ve stacku,
 který se nám během rekurze vytvořil, skočíme o úrověň výš, kde sléváme
 podseznamy délky 4, případně 3.
 Takto skáčeme až do chvíle, kdy se ocitneme v hlavní smyčce programu a
 sléváme levou a pravou polovinu seznamu, který nám byl vložen na vstupu.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "mergesort_snippet02.java"
lstparams "breaklines=true,language=Java,numbers=left,numberstyle={\\footnotesize}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Quicksort
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní quicksortu z předmětu A4B36ALG spolecna/15/quicksort.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quicksort je velmi rychlý 
\series bold
nestabilní
\series default
 řadící algoritmus na principu 
\series bold
rozděl a panuj
\series default
 s asymptotickou složitostí 
\begin_inset Formula $\text{Ο}(n^{2})$
\end_inset

 a s očekávanou složitostí
\begin_inset Formula $\text{Ο}(n*\log(n))$
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Průběh algoritmu
\end_layout

\begin_layout Enumerate
Levý index se nastaví na začátek zpracovávaného úseku pole, pravý na jeho
 konec, zvolí se pivot, nejjednodušeji tak, že se vybere prvek na začátku
 zpracovávaného úseku.
 Levý index se pohybuje doprava a zastaví se na prvku vetším nebo rovném
 pivotovi.
 Pravý index se pohybuje doleva a zastaví se na prvku menším nebo rovném
 pivotovi.
 
\end_layout

\begin_layout Enumerate
Pokud je levý index ještě před pravým, příslušné prvky se prohodí, a oba
 indexy se posunou o 1 ve svém směru.
 Jinak pokud se indexy rovnají, jen se oba posunou o 1 ve svém směru.
 
\end_layout

\begin_layout Enumerate
Cyklus se opakuje, dokud se indexy neprekříží, tj.
 pravý se dostane pred levého.
 
\end_layout

\begin_layout Enumerate
Následuje rekurzivní volání (zpracování „malých" a „velkých" zvlášť) na
 úsek od začátku do pravého indexu včetně a na úsek od levého indexu včetně
 až do konce, má-li príslušný úsek délku větší než 1.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "quicksort_snippet01.java"
lstparams "breaklines=true,language=Java,numbers=left,numberstyle={\\footnotesize}"

\end_inset


\end_layout

\end_inset


\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Heapsort
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní heapsortu z předmětu A4B36ALG spolecna/15/heapsort.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Heapsort (řazení haldou) je jedním z nejefektivnějších řadících algoritmů
 založených na porovnávání prvků s asymptotickou složitostí 
\begin_inset Formula $\text{Ο}(n*\log(n))$
\end_inset

.
 Heapsort je 
\series bold
nestabilní
\series default
.
\end_layout

\begin_layout Subsubsection
Vlastnosti haldy
\end_layout

\begin_layout Standard
Halda je binární strom s rekurzivní vlastností býti haldou.
 Rekurzivita vlastnosti značí, že i každý podstrom haldy je taktéž haldou.
 V každé haldě také platí, že otec má vždy vyšší hodnotu než jeho potomci.
 Při její implementaci polem pak také platí, že pokud je otec na indexu
 
\begin_inset Formula $i$
\end_inset

, tak jsou jeho potomci na indexech 
\begin_inset Formula $2i+1$
\end_inset

 a 
\begin_inset Formula $2i+2$
\end_inset

 (indexováno od 0).
 Z tohoto uspořádání plyne, že tvar haldy je pyramida s částečně useknutou
 pravou stranou základny.
\end_layout

\begin_layout Subsubsection
Průběh algoritmu
\end_layout

\begin_layout Standard
Budu se odkazovat na zdrojový kód na následující stránce.
\end_layout

\begin_layout Enumerate
Postavme haldu nad zadaným polem.
 To se děje ve 
\family typewriter
for-cyklu
\family default
 na řádku 7.
 Je důležité povšimnout si, že cyklus probíhá od poloviny a jde pozpátku.
 Proč? Protože seznam znázorňuje haldu, to znamená, že rodičem posledního
 členu bude prostřední člen.
 Tohle je potřeba pochopit, mrkněte na spolecna/15/heapsort.pdf.
\end_layout

\begin_layout Enumerate
Z našeho neuspořádaného seznamu jsme udělali haldu.
 Je to pořád seznam, array, ale splňuje charakteristiku haldy.
 Na řádku 10 začíná řazení.
\end_layout

\begin_layout Enumerate
Začneme tím, že prvek na vrcholu prohodíme s i-tým prvkem seznamu (řádek
 11).
 Tím dosáváme na konci seznamu již seřazené prvky.
\end_layout

\begin_layout Enumerate
Prohozením se ale na vrcholu haldy může ocitnout prvek, který tam nemá co
 dělat.
 Proto na řádku 12 dojde k opravení haldy.
\end_layout

\begin_layout Standard
Hlavní část algoritmu je v metodě repairTop.
 Ta zařadí vrchol haldy na správné místo (řádek 38, proměnná topIndex se
 nastaví ve 
\family typewriter
while-cyklu
\family default
) a nahradí ho prvkem, který má být na vrcholu (řádek 31).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "heapsort_snippet01.java"
lstparams "breaklines=true,language=Java,numbers=left,numberstyle={\\footnotesize}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Radixsort
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní radixsortu z předmětu A4B36ALG spolecna/15/radixsort.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Princip radix sortu vychází přímo z definice stabilního řazení – řadicí
 algoritmus je stabilní, pokud zachovává pořadí klíčů, které mají stejnou
 hodnotu (tj.
 pokud stuktury seřadíme napřed dle klíče 
\series bold
A
\series default
, poté podle klíče 
\series bold
B
\series default
, tak jsou seřazeny podle 
\series bold
B
\series default
, a kde jsou si hodnoty 
\series bold
B
\series default
 rovny, tam jsou struktury v pořadí daném klíčem 
\series bold
A
\series default
).
\end_layout

\begin_layout Standard
Popis algoritmu vychází z následujícího kusu kódu, který je ale zkrácen.
 Celá kopie je v 
\family typewriter
spolecna/15/radixsort.java
\family default
.
 Názvy proměnných vychází z označení v 
\family typewriter
spolecna/15/radixsort.pdf
\family default
, je proto dobré procházet si kód zároveň s tímto pdf.
\end_layout

\begin_layout Enumerate
Vytvoříme pomocné tabulky
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
z
\series default
 - první výskyt znaků
\end_layout

\begin_layout Itemize

\series bold
k
\series default
 - poslední výskyt znaků
\end_layout

\begin_layout Itemize

\series bold
d
\series default
 - tabulka odkazů na další výskyt znaku
\end_layout

\begin_layout Standard
a to z posledního znaku slova (poslední klíč při řazení, řádek 4).
 Funkce 
\family typewriter
initStep
\family default
 projde pole všech slov na vstupu (15), zjistí poslední písmeno (16), pokud
 ještě není v tabulce prvních výskytů znaků 
\series bold
z
\series default
, přidá ho do ní a zároveň do tabulky posledního výskytu znaku 
\series bold
k
\series default
 (18).
 Pokud už nějaký záznam s klíčem 
\series bold
c
\series default
 existuje, algoritmus uloží na jeho pozici v tabulce 
\series bold
d
\series default
 odkaz na právě iterovaný prvek (20), tento prvek se stane i posledním výskytem
 daného znaku (21).
 
\end_layout

\end_deeper
\begin_layout Enumerate
Poté začneme iterovat přes délku slov na vstupu (5) - to je důvod, proč
 musí být všechny řetězce různé délky uvedeny na stejnou délku připojením
 "nevýznamných znaků", např.
 mezer.
\end_layout

\begin_layout Enumerate
Funkce 
\family typewriter
radixStep
\family default
 se podívá na aktuální pomocné tabulky, které určují pořadí prvků podle
 aktuálního klíče.
 Při prvním průchodu funkcí to tedy bude podle posledního znaku.
\end_layout

\begin_deeper
\begin_layout Standard
Vlastní funkce 
\family typewriter
radixStep
\family default
 začíná iterací přes pole prvních výskytů znaků (28).
 V ní je vnořen další cyklus určen pomocnou tabulkou 
\series bold
d
\series default
 a 
\series bold
k
\series default
.
 Pokud se aktuální prvek rovná koncovému výskytu znaku (39), tento vnitřní
 cyklus skončí.
 Během tohoto cyklu se testuje to samé jako ve funkci 
\family typewriter
initStep
\family default
 s tím rozdílem, že tentokrát ukládáme informace do pomocných tabulek 
\series bold
z1
\series default
, 
\series bold
k1
\series default
, 
\series bold
d1
\series default
 (34, 36, 37), takže si nepřepíšeme aktuálně iterované 
\series bold
z
\series default
, 
\series bold
k
\series default
, 
\series bold
d
\series default
.
 Přepsání proběhne až v hlavním cyklus programu (7, 8, 9).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "radixsort_snippet01.java"
lstparams "breaklines=true,language=Java,numbers=left,numberstyle={\\footnotesize}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Vyhledávání půlením intervalu
\end_layout

\begin_layout Standard
Metoda půlení intervalu (nebo také binární vyhledávání) je vyhledávací algoritmu
s typu 
\series bold
rozděl a panuj
\series default
 na nalezení zadané hodnoty v 
\series bold
uspořádaném seznamu
\series default
 pomocí zkracování seznamu o polovinu v každém kroku.
 
\end_layout

\begin_layout Standard
Binární vyhledávání najde medián, porovná s hledanou hodnotou a na základě
 výsledku porovnání se rozhodne o pokračování v horní nebo dolní části seznamu
 a rekurzivně pokračuje od začátku.
 Binární vyhledávání je algoritmus s logaritmickou časovou složitostí 
\begin_inset Formula $\text{Ο}(\log(n))$
\end_inset

.
 Přesněji, je potřeba iterací na získání výsledku.
 Je značně rychlejší než lineární vyhledávání, které má časovou složitost
 
\begin_inset Formula $\text{Ο}(n)$
\end_inset

.
 Nicméně vyžaduje, aby data byla setříděna, je tudíž vhodný jen pro určitou
 množinu problémů.
\end_layout

\begin_layout Subsection
Srovnání složitostí
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní složitostí vypracované z předmětu A4B36ALG spolecna/15/bench
mark.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nejhorší případ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nejlepší případ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Průměrný případ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stabilní
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quick sort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
\begin_inset Formula $\text{Θ}(n^{2})$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ne
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Merge sort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ano
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Heap sort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
\begin_inset Formula $\text{Θ}(nlog(n))$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ne
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Radix sort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
\begin_inset Formula $\text{Θ}(n)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
\begin_inset Formula $\text{Θ}(n)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
\begin_inset Formula $\text{Θ}(n)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ano
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document

#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrreprt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{chapter}{14} 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Základní algoritmy řazení (mergesort, quicksort, heapsort, radixsort) a
 vyhledávání půlením intervalu, jejich složitost.
 (A4B36ALG)
\end_layout

\begin_layout Section
Základní algoritmy řazení
\end_layout

\begin_layout Standard
V popiscích jednotlivých algoritmů se vyskytují následující hesla a charakterist
iky 
\end_layout

\begin_layout Minisec
Rozděl a panuj
\end_layout

\begin_layout Standard
Tato metoda označuje ty algoritmy pro práci s daty, které řeší problém rozdělení
m řešené úlohy na 
\series bold
dílčí části (podproblémy)
\series default
, nad kterými se provádí algoritmická operace.
 Často se tato metoda implementuje rekurzivně nebo iterativně a původní
 úloha se dělí na stále menší části.
\end_layout

\begin_layout Minisec
Stabilní/nestabilní algoritmus
\end_layout

\begin_layout Standard
Stabilním algoritmus je ten, který zachovává pořadí stejných prvků, tak
 jak byly na vstupu v seznamu.
 Seřadí je na odpovídající místo, ale v rámci stejných prvků zůstanou ve
 stejném pořadí.
 U nestabilního algoritmu toto nezaručíme.
 
\end_layout

\begin_layout Subsection
Mergesort
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní mergesortu z předmětu A4B36ALG spolecna/15/mergesort.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mergesort je 
\series bold
stabilní
\series default
 řadicí algoritmus typu 
\series bold
rozděl a panuj
\series default
 s asymptotickou složitostí 
\begin_inset Formula $\text{Ο}(n*\log(n))$
\end_inset

.
 Merge sort pracuje na bázi 
\series bold
slévání
\series default
 již seřazených částí pole.
 
\end_layout

\begin_layout Subsubsection
Merge
\end_layout

\begin_layout Standard
Proces merge nebo-li slévání probíhá následovně.
 Máme dva seznamy, u kterých víme, že jsou seřazeny ve stejném pořadí.
 Postupně je procházíme a díváme se, který z právě iterovaných členů je
 větší (případně menší, záleží, jak srovnávám).
 Ten větší (resp.
 menší) z dvojice vložíme do pomocného seznamu.
 Takto se dostanem do fáze, kdy jeden ze seznamů, kterými iterujem, je už
 prázdný.
 Můžeme tedy zbytek druhého vzít a celý ho zkopírovat na konec do pomocného
 seznamu.
\end_layout

\begin_layout Standard
Ve vypsaném kódu je první 
\family typewriter
while
\family default
 cyklus porovnávání.
 Z následujících dvou cyklů se provede jen jeden a to ten, který zkopíruje
 do pomocného seznamu zbývající členy jednoho ze dvou iterovaných seznamů.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "mergesort_snippet01.java"
lstparams "breaklines=true,language=Java"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Průběh algoritmu
\end_layout

\begin_layout Standard
Algoritmu dodáme array, který postupným půlením rekurzivně rozdělíme do
 nejmenších skupin, tedy dvojic a připadně lichého členu.
 Aplikujeme proces merge na tyto malé jednotky, a ve stacku, který se nám
 během rekurze vytvořil, skočíme o úrověň výš, kde sléváme podseznamy délky
 4, případně 3.
 Takto skáčeme až do chvíle, kdy se ocitneme v hlavní smyčce programu a
 sléváme levou a pravou polovinu seznamu, který nám byl vložen na vstupu.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "mergesort_snippet02.java"
lstparams "breaklines=true,language=Java"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Quicksort
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Grafické zpracovaní quicksortu z předmětu A4B36ALG spolecna/15/quicksort.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quicksort je velmi rychlý 
\series bold
nestabilní
\series default
 řadící algoritmus na principu 
\series bold
rozděl a panuj
\series default
 s asymptotickou složitostí 
\begin_inset Formula $\text{Ο}(n^{2})$
\end_inset

 a s očekávanou složitostí
\begin_inset Formula $\text{Ο}(n*\log(n))$
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Průběh algoritmu
\end_layout

\begin_layout Enumerate
Levý index se nastaví na začátek zpracovávaného úseku pole, pravý na jeho
 konec, zvolí se pivot, nejjednodušeji tak, že se vybere prvek na začátku
 zpracovávaného úseku.
 Levý index se pohybuje doprava a zastaví se na prvku vetším nebo rovném
 pivotovi.
 Pravý index se pohybuje doleva a zastaví se na prvku menším nebo rovném
 pivotovi.
 
\end_layout

\begin_layout Enumerate
Pokud je levý index ještě před pravým, příslušné prvky se prohodí, a oba
 indexy se posunou o 1 ve svém směru.
 Jinak pokud se indexy rovnají, jen se oba posunou o 1 ve svém směru.
 
\end_layout

\begin_layout Enumerate
Cyklus se opakuje, dokud se indexy neprekříží, tj.
 pravý se dostane pred levého.
 
\end_layout

\begin_layout Enumerate
Následuje rekurzivní volání (zpracování „malých" a „velkých" zvlášť) na
 úsek od začátku do pravého indexu včetně a na úsek od levého indexu včetně
 až do konce, má-li príslušný úsek délku větší než 1.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "quicksort_snippet01.java"
lstparams "breaklines=true,language=Java"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Heapsort
\end_layout

\begin_layout Standard
Heapsort (řazení haldou) je jedním z nejefektivnějších řadících algoritmů
 založených na porovnávání prvků s asymptotickou složitostí 
\begin_inset Formula $\text{Ο}(n*\log(n))$
\end_inset

.
 Heapsort je 
\series bold
nestabilní
\series default
.
\end_layout

\begin_layout Subsubsection
Vlastnosti haldy
\end_layout

\begin_layout Standard
Halda je binární strom s rekurzivní vlastností býti haldou.
 Rekurzivita vlastnosti značí, že i každý podstrom haldy je taktéž haldou.
 V každé haldě také platí, že otec má vždy vyšší hodnotu než jeho potomci.
 Při její implementaci polem pak také platí, že pokud je otec na indexu
 
\begin_inset Formula $i$
\end_inset

, tak jsou jeho potomci na indexech 
\begin_inset Formula $2i+1$
\end_inset

 a 
\begin_inset Formula $2i+2$
\end_inset

 (indexováno od 0).
 Z tohoto uspořádání plyne, že tvar haldy je pyramida s částečně useknutou
 pravou stranou základny.
\end_layout

\end_body
\end_document
